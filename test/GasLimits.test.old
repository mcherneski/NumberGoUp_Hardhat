import { expect } from "chai";
import { ethers } from "hardhat";
import { NumberGoUp } from "../typechain-types";
import { SignerWithAddress } from "@nomicfoundation/hardhat-ethers/signers";

describe("Gas Limits - Transfer Tests", function () {
    let numberGoUp: NumberGoUp;
    let owner: SignerWithAddress;
    let nonExempt1: SignerWithAddress;
    let nonExempt2: SignerWithAddress;
    let exempt1: SignerWithAddress;
    let exempt2: SignerWithAddress;
    let addrs: SignerWithAddress[];

    const NAME = "Number Go Up";
    const SYMBOL = "NGU";
    const DECIMALS = 18n;
    const MAX_SUPPLY = 10_000n;
    const UNITS = 10n ** DECIMALS;

    beforeEach(async function () {
        [owner, nonExempt1, nonExempt2, exempt1, exempt2, ...addrs] = await ethers.getSigners();

        const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
        numberGoUp = await NumberGoUp.deploy(
            NAME,
            SYMBOL,
            DECIMALS,
            MAX_SUPPLY,
            owner.address,
            owner.address,
            addrs[0].address,
            addrs[1].address
        );

        // Transfer initial tokens to nonExempt1 for testing
        await numberGoUp.connect(owner).transfer(nonExempt1.address, UNITS * 800n, {
            gasLimit: 50000000
        });
    });

    async function findExemptToNonExemptLimit() {
        let amount = UNITS * 800n;
        let lastSuccessfulAmount = 0n;
        let lastSuccessfulGas = 0n;

        while (true) {
            try {
                const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
                const freshContract = await NumberGoUp.deploy(
                    NAME,
                    SYMBOL,
                    DECIMALS,
                    MAX_SUPPLY,
                    owner.address,
                    owner.address,
                    addrs[0].address,
                    addrs[1].address
                );

                const tx = await freshContract.connect(owner).transfer(nonExempt1.address, amount, {
                    gasLimit: 50000000
                });
                const receipt = await tx.wait();
                lastSuccessfulAmount = amount;
                lastSuccessfulGas = receipt?.gasUsed || 0n;
                amount += UNITS * 10n;
            } catch (error) {
                return {
                    maxTokens: lastSuccessfulAmount / UNITS,
                    gasUsed: lastSuccessfulGas
                };
            }
        }
    }

    async function findNonExemptToNonExemptLimit() {
        let amount = UNITS * 800n;
        let lastSuccessfulAmount = 0n;
        let lastSuccessfulGas = 0n;

        while (true) {
            try {
                const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
                const freshContract = await NumberGoUp.deploy(
                    NAME,
                    SYMBOL,
                    DECIMALS,
                    MAX_SUPPLY,
                    owner.address,
                    owner.address,
                    addrs[0].address,
                    addrs[1].address
                );

                await freshContract.connect(owner).transfer(nonExempt1.address, UNITS * (amount + 100n), {
                    gasLimit: 50000000
                });

                const tx = await freshContract.connect(nonExempt1).transfer(nonExempt2.address, amount, {
                    gasLimit: 50000000
                });
                const receipt = await tx.wait();
                lastSuccessfulAmount = amount;
                lastSuccessfulGas = receipt?.gasUsed || 0n;
                amount += UNITS * 1n;
            } catch (error) {
                return {
                    maxTokens: lastSuccessfulAmount / UNITS,
                    gasUsed: lastSuccessfulGas
                };
            }
        }
    }

    async function findExemptToExemptLimit() {
        let amount = UNITS * 800n;
        let lastSuccessfulAmount = 0n;
        let lastSuccessfulGas = 0n;

        while (true) {
            try {
                const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
                const freshContract = await NumberGoUp.deploy(
                    NAME,
                    SYMBOL,
                    DECIMALS,
                    MAX_SUPPLY,
                    owner.address,
                    owner.address,
                    addrs[0].address,
                    addrs[1].address
                );

                await freshContract.connect(owner).setERC721TransferExempt(exempt1.address, true);
                await freshContract.connect(owner).setERC721TransferExempt(exempt2.address, true);
                
                await freshContract.connect(owner).transfer(exempt1.address, UNITS * (amount + 100n), {
                    gasLimit: 50000000
                });

                const tx = await freshContract.connect(exempt1).transfer(exempt2.address, amount, {
                    gasLimit: 50000000
                });
                const receipt = await tx.wait();
                lastSuccessfulAmount = amount;
                lastSuccessfulGas = receipt?.gasUsed || 0n;
                amount += UNITS * 5n;
            } catch (error) {
                return {
                    maxTokens: lastSuccessfulAmount / UNITS,
                    gasUsed: lastSuccessfulGas
                };
            }
        }
    }

    async function findMaxNFTMintingLimit() {
        let low = 800n;
        let high = 20000n;
        let lastSuccessfulAmount = 0n;
        let lastSuccessfulGas = 0n;

        while (low <= high) {
            const mid = (low + high) / 2n;

            try {
                const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
                const freshContract = await NumberGoUp.deploy(
                    NAME,
                    SYMBOL,
                    DECIMALS,
                    MAX_SUPPLY,
                    owner.address,
                    owner.address,
                    addrs[0].address,
                    addrs[1].address
                );

                await freshContract.connect(owner).setERC721TransferExempt(exempt1.address, true);
                await freshContract.connect(owner).transfer(exempt1.address, UNITS * mid, {
                    gasLimit: 50000000
                });

                const tx = await freshContract.connect(owner).setERC721TransferExempt(exempt1.address, false, {
                    gasLimit: 50000000
                });
                const receipt = await tx.wait();

                lastSuccessfulAmount = mid;
                lastSuccessfulGas = receipt?.gasUsed || 0n;
                low = mid + 1n;
            } catch (error) {
                high = mid - 1n;
            }
        }

        // Verify the exact limit with one final test
        try {
            const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
            const finalContract = await NumberGoUp.deploy(
                NAME,
                SYMBOL,
                DECIMALS,
                MAX_SUPPLY,
                owner.address,
                owner.address,
                addrs[0].address,
                addrs[1].address
            );

            await finalContract.connect(owner).setERC721TransferExempt(exempt1.address, true);
            await finalContract.connect(owner).transfer(exempt1.address, UNITS * lastSuccessfulAmount, {
                gasLimit: 50000000
            });

            const tx = await finalContract.connect(owner).setERC721TransferExempt(exempt1.address, false, {
                gasLimit: 50000000
            });
            const receipt = await tx.wait();
            lastSuccessfulGas = receipt?.gasUsed || 0n;
        } catch (error) {}

        return {
            maxNFTs: lastSuccessfulAmount,
            gasUsed: lastSuccessfulGas
        };
    }

    async function findMaxNFTBurnLimit() {
        let low = 800n;
        let high = 20000n;
        let lastSuccessfulAmount = 0n;
        let lastSuccessfulGas = 0n;

        while (low <= high) {
            const mid = (low + high) / 2n;

            try {
                const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
                const freshContract = await NumberGoUp.deploy(
                    NAME,
                    SYMBOL,
                    DECIMALS,
                    MAX_SUPPLY,
                    owner.address,
                    owner.address,
                    addrs[0].address,
                    addrs[1].address
                );

                await freshContract.connect(owner).transfer(nonExempt1.address, UNITS * mid, {
                    gasLimit: 50000000
                });

                const tx = await freshContract.connect(owner).setERC721TransferExempt(nonExempt1.address, true, {
                    gasLimit: 50000000
                });
                const receipt = await tx.wait();

                lastSuccessfulAmount = mid;
                lastSuccessfulGas = receipt?.gasUsed || 0n;
                low = mid + 1n;
            } catch (error) {
                high = mid - 1n;
            }
        }

        // Verify the exact limit with one final test
        try {
            const NumberGoUp = await ethers.getContractFactory("NumberGoUp");
            const finalContract = await NumberGoUp.deploy(
                NAME,
                SYMBOL,
                DECIMALS,
                MAX_SUPPLY,
                owner.address,
                owner.address,
                addrs[0].address,
                addrs[1].address
            );

            await finalContract.connect(owner).transfer(nonExempt1.address, UNITS * lastSuccessfulAmount, {
                gasLimit: 50000000
            });

            const tx = await finalContract.connect(owner).setERC721TransferExempt(nonExempt1.address, true, {
                gasLimit: 50000000
            });
            const receipt = await tx.wait();
            lastSuccessfulGas = receipt?.gasUsed || 0n;
        } catch (error) {}

        return {
            maxNFTs: lastSuccessfulAmount,
            gasUsed: lastSuccessfulGas
        };
    }

    it("Should find maximum exempt to non-exempt transfer limit", async function () {
        const result = await findExemptToNonExemptLimit();
        expect(result.maxTokens).to.be.gte(800n);
    });

    it("Should find maximum non-exempt to non-exempt transfer limit", async function () {
        const result = await findNonExemptToNonExemptLimit();
        expect(result.maxTokens).to.be.gte(800n);
    });

    it("Should find maximum exempt to exempt transfer limit", async function () {
        const result = await findExemptToExemptLimit();
        expect(result.maxTokens).to.be.gte(800n);
        expect(result.gasUsed).to.be.below(100000n);
    });

    it("Should find maximum NFT minting limit when removing exempt status", async function () {
        const result = await findMaxNFTMintingLimit();
        expect(result.maxNFTs).to.be.gte(800n);
    });

    it("Should find maximum NFT burning limit when adding exempt status", async function () {
        const result = await findMaxNFTBurnLimit();
        expect(result.maxNFTs).to.be.gte(800n);
    });
}); 